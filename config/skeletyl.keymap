#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hmp: homerow_mods_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Combos for media player.
        // I often switch songs while drawing, so I assign the
        // combos on left hand side.

        combo_med_next {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp C_NEXT>;
            layers = <0 1 2 3 4 5 6 8>;
        };

        combo_med_prev {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp C_PREV>;
            layers = <0 1 2 3 4 5 6 8>;
        };

        combo_med_pp {
            timeout-ms = <50>;
            key-positions = <1 4>;
            bindings = <&kp C_PP>;
            layers = <0 1 2 3 4 5 6 8>;
        };

        combo_med_stop {
            timeout-ms = <50>;
            key-positions = <1 3>;
            bindings = <&kp C_STOP>;
            layers = <0 1 2 3 4 5 6 8>;
        };

        combo_med_vol_up {
            timeout-ms = <50>;
            key-positions = <2 13>;
            bindings = <&kp C_VOL_UP>;
            layers = <0 1 2 3 4 5 6 8>;
        };

        combo_med_vol_dn {
            timeout-ms = <50>;
            key-positions = <3 12>;
            bindings = <&kp C_VOL_DN>;
            layers = <0 1 2 3 4 5 6 8>;
        };

        combo_med_mute {
            timeout-ms = <50>;
            key-positions = <12 14>;
            bindings = <&kp C_MUTE>;
            layers = <0 1 2 3 4 5 6 8>;
        };

        // combo for toggling illust layer
        // Combo for toggling the Colemak layout
        // Combo for bluetooth control
        // (i.e. switch among the devices).

        combo_bt_next {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&bt BT_NXT>;
            layers = <0 1 2 3 4 5 6 8>;
        };

        combo_bt_prev {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&bt BT_PRV>;
            layers = <0 1 2 3 4 5 6 8>;
        };

        combo_bt_out_tog {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&out OUT_TOG>;
            layers = <0 1 2 3 4 5 6 8>;
        };

        toggle_gaming {
            bindings = <&tog 7>;
            key-positions = <29 20>;
            layers = <0 7>;
            timeout-ms = <150>;
        };

        to_secondary_lang {
            bindings = <&to_second_lang>;
            key-positions = <32 33>;
            layers = <0 1 2 3 4 5 6 8>;
            timeout-ms = <50>;
        };

        to_qwerty_lang {
            bindings = <&to_qwerty>;
            key-positions = <33 32>;
            layers = <8>;
            timeout-ms = <50>;
        };
    };

    macros {
        to_second_lang: to_second_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 8 &kp LS(LC(NUMBER_2))>;
            label = "TO_SECOND_LANG";
        };

        to_qwerty: to_qwerty {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 8 &kp LS(LC(NUMBER_1))>;
            label = "TO_QWERTY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&kp Q            &kp W           &kp E               &kp R             &kp T            &kp Y         &kp U              &kp I                &kp O            &kp P
&hmp LEFT_GUI A  &hm LEFT_ALT S  &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &kp G            &kp H         &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hm RIGHT_ALT L  &hmp RIGHT_GUI SEMI
&kp Z            &kp X           &kp C               &kp V             &kp B            &kp N         &kp M              &kp COMMA            &kp DOT          &kp FSLH
&lt 2 ESCAPE     &lt 1 SPACE     &lt 6 TAB           &lt 4 ENTER       &lt 3 BACKSPACE  &lt 5 DELETE
            >;
        };

        Nav {
            bindings = <
&none     &none     &none      &none      &none     &kp LC(Z)   &kp LC(V)  &kp LC(C)      &kp LC(X)     &kp LC(RS(Z))
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none     &kp CAPS    &kp LEFT   &kp DOWN       &kp UP_ARROW  &kp RIGHT
&none     &none     &none      &none      &none     &kp INSERT  &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP   &kp END
&none     &none     &none      &kp ENTER  &kp BSPC  &kp DELETE
            >;
        };

        Media {
            bindings = <
&bootloader   &none         &none             &none           &none  &none           &none         &none         &none         &bootloader
&kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none  &none           &none         &none         &none         &none
&none         &none         &none             &none           &none  &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none
&none         &none         &kp C_MUTE        &none           &none  &none
            >;
        };

        Num {
            bindings = <
&kt LEFT_BRACKET  &kp N7  &kp N8     &kp N9  &kp RIGHT_BRACKET  &none  &none      &none      &none     &none
&kp SEMI          &kp N4  &kp N5     &kp N6  &kp EQUAL          &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp LGUI
&kp GRAVE         &kp N1  &kp N2     &kp N3  &kp BSLH           &none  &none      &none      &none     &none
&kp DOT           &kp N0  &kp MINUS  &none   &none              &none
            >;
        };

        Sym {
            bindings = <
&kp LEFT_BRACE                   &kp AMPERSAND                      &kp ASTERISK  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &none  &none      &none      &none     &none
&kp COLON                        &kp DOLLAR                         &kp PERCENT   &kp CARET              &kp PLUS         &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp LEFT_GUI
&kp SQT                          &kp EXCLAMATION                    &kp AT_SIGN   &kp HASH               &kp PIPE         &none  &none      &none      &none     &none
&mt LEFT_BRACE LEFT_PARENTHESIS  &mt RIGHT_BRACE RIGHT_PARENTHESIS  &none         &none                  &none            &none
            >;
        };

        Fun {
            bindings = <
&kp F12  &kp F7     &kp F8   &kp F9  &kp PRINTSCREEN  &none  &none      &none      &none     &none
&kp F11  &kp F4     &kp F5   &kp F6  &kp SCROLLLOCK   &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp F10  &kp F1     &kp F2   &kp F3  &kp PAUSE_BREAK  &none  &none      &none      &none     &none
&none    &kp SPACE  &kp TAB  &none   &none            &none
            >;
        };

        Button {
            bindings = <
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LS(LC(Z))  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(LS(Z))
&kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &none          &none      &kp RSHFT  &kp RCTRL  &kp RALT   &kp RGUI
&none      &none      &none      &none      &none          &none      &none      &none      &none      &none
&none      &none      &none      &none      &none          &none
            >;
        };

        Gaming {
            bindings = <
&kp Q      &kp W      &kp E           &kp R      &kp T      &kp Y      &kp U  &kp I    &kp O       &kp P
&kp A      &kp S      &kp D           &kp F      &kp G      &kp H      &kp J  &kp K    &kp L       &kp GRAVE
&kp Z      &kp X      &kp C           &kp V      &kp B      &kp N      &kp M  &kp TAB  &kp ESCAPE  &none
&kp SPACE  &kp LCTRL  &kp LEFT_SHIFT  &kp LSHFT  &kp LCTRL  &kp SPACE
            >;
        };

        Russian {
            bindings = <
&kp Q                   &kp W            &kp E               &kp R             &kp T            &kp Y                &kp U              &kp I                &kp O            &kp P
&hmp LEFT_GUI A         &hm LEFT_ALT S   &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &kp G            &kp H                &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hm RIGHT_ALT L  &hmp RIGHT_GUI SEMICOLON
&kp Z                   &kp X            &kp C               &kp V             &kp B            &kp N                &kp M              &kp COMMA            &kp DOT          &kp FSLH
&lt 2 LA(LEFT_BRACKET)  &lt 1 LS(SPACE)  &lt 6 TAB           &lt 4 ENTER       &lt 5 BACKSPACE  &lt 5 RIGHT_BRACKET
            >;
        };
    };
};
