#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hmp: homerow_mods_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        to_utils {
            bindings = <&none>;
            key-positions = <7 2 30 35>;
            layers = <0 1>;
        };

        to_mac {
            bindings = <&to 1>;
            key-positions = <26 30 32>;
            layers = <0>;
        };

        to_windows {
            bindings = <&to 0>;
            key-positions = <33 35 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&kp Q            &kp W           &kp E               &kp R             &kp T          &kp Y      &kp U              &kp I                &kp O            &kp P
&hmp LEFT_GUI A  &hm LEFT_ALT S  &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &kp G          &kp H      &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hm RIGHT_ALT L  &hmp RIGHT_GUI SEMICOLON
&kp Z            &kp X           &kp C               &kp V             &kp B          &kp N      &kp M              &kp COMMA            &kp DOT          &kp FSLH
&lt 4 ESCAPE     &lt 3 SPACE     &lt 2 TAB           &lt 5 ENTER       &kp BACKSPACE  &lt 6 DEL
            >;
        };

        qwerty_mac {
            bindings = <
&kp Q            &kp W           &kp E               &kp R             &kp T          &kp Y      &kp U              &kp I                &kp O            &kp P
&hmp LEFT_GUI A  &hm LEFT_ALT S  &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &kp G          &kp H      &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hm RIGHT_ALT L  &hmp RIGHT_GUI SEMICOLON
&kp Z            &kp X           &kp C               &kp V             &kp B          &kp N      &kp M              &kp COMMA            &kp DOT          &kp FSLH
&lt 4 ESCAPE     &lt 3 SPACE     &lt 2 TAB           &lt 5 ENTER       &kp BACKSPACE  &lt 7 DEL
            >;
        };

        num {
            bindings = <
&kp LEFT_PARENTHESIS  &kp N7  &kp N8  &kp N9     &kp RIGHT_PARENTHESIS  &none      &none      &none      &none     &none
&kt PLUS              &kp N4  &kp N5  &kp N6     &kp ASTERISK           &none      &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI
&kp MINUS             &kp N1  &kp N2  &kp N3     &kp SLASH              &none      &none      &none      &none     &none
&none                 &none   &none   &kp ENTER  &kp N0                 &kp EQUAL
            >;
        };

        nav {
            bindings = <
&none  &kp HOME     &kp UP_ARROW  &kp END        &none   &none   &none            &none      &none     &none
&none  &kp LEFT     &kp DOWN      &kp RIGHT      &none   &none   &kp RIGHT_SHIFT  &kp LCTRL  &kp LALT  &kp LGUI
&none  &kp PAGE_UP  &none         &kp PAGE_DOWN  &none   &none   &none            &none      &none     &none
&none  &none        &none         &trans         &trans  &trans
            >;
        };

        func {
            bindings = <
&kp F10  &kp F1  &kp F2  &kp F3  &none  &none  &none      &none      &none     &kp PRINTSCREEN
&kp F11  &kp F4  &kp F5  &kp F6  &none  &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI
&kp F12  &kp F7  &kp F8  &kp F9  &none  &none  &none      &none      &none     &none
&none    &none   &none   &none   &none  &none
            >;
        };

        programming {
            bindings = <
&kp GRAVE                &kp LEFT_PARENTHESIS   &kp DOUBLE_QUOTES      &kp RIGHT_PARENTHESIS  &kp SINGLE_QUOTE  &none  &none  &none      &none  &none
&kp PLUS                 &kp LEFT_BRACE         &kp COLON              &kp RIGHT_BRACE        &kp ASTERISK      &none  &none  &kp ENTER  &none  &none
&mt UNDERSCORE MINUS     &kp LEFT_BRACKET       &kt QUESTION           &kp RIGHT_BRACKET      &kp SLASH         &none  &none  &none      &none  &none
&mt AMPERSAND LESS_THAN  &mt EXCLAMATION EQUAL  &mt PIPE GREATER_THAN  &none                  &none             &none
            >;
        };

        button {
            bindings = <
&none                   &kp LC(Z)    &kp LC(A)                &kp LC(LS(Z))  &none  &none  &none  &none  &none  &none
&none                   &none        &kp LC(A)                &none          &none  &none  &none  &none  &none  &none
&kp LC(Z)               &kp LC(X)    &kp LC(C)                &kp LC(V)      &none  &none  &none  &none  &none  &none
&kp LC(LG(LEFT_ARROW))  &kp LG(TAB)  &kp LC(LG(RIGHT_ARROW))  &none          &none  &none
            >;
        };

        button_mac {
            bindings = <
&none               &kp LG(Z)         &kp LG(A)            &kp LS(LG(Z))  &none  &none  &none  &none  &none  &none
&none               &none             &kp LG(A)            &kp LC(LG(F))  &none  &none  &none  &none  &none  &none
&none               &kp LC(X)         &kp LC(C)            &kp LC(V)      &none  &none  &none  &none  &none  &none
&kp LC(LEFT_ARROW)  &kp LC(UP_ARROW)  &kp LC(RIGHT_ARROW)  &none          &none  &none
            >;
        };

        utils {
            bindings = <
&bootloader     &none         &none         &none  &sys_reset  &none  &none  &none  &none  &bootloader
&none           &none         &none         &none  &none       &none  &none  &none  &none  &none
&none           &none         &none         &none  &none       &none  &none  &none  &none  &none
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &none  &none       &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
