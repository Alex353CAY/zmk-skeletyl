#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hmp: homerow_mods_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        to_utils {
            bindings = <&tog 7>;
            key-positions = <10 19 29 20>;
            layers = <0 7>;
        };

        clearBluetooth {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <35 34 31 30>;
            layers = <7>;
        };

        enter_macro {
            bindings = <&kp ENTER>;
            key-positions = <32 33>;
        };

        esc_macro {
            bindings = <&kp ESCAPE>;
            key-positions = <30 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_win {
            bindings = <
&kp Q            &kp W           &kp E               &kp R             &lt 5 T       &lt 6 Y          &kp U              &kp I                &kp O            &kp P
&hmp LEFT_GUI A  &hm LEFT_ALT S  &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &kp G         &kp H            &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hm RIGHT_ALT L  &hmp RIGHT_GUI SEMICOLON
&kp Z            &kp X           &kp C               &kp V             &kp B         &kp N            &kp M              &kp COMMA            &kp DOT          &kp SLASH
&kp LEFT_SHIFT   &lt 3 SPACE     &lt 4 TAB           &lt 2 BACKSPACE   &lt 1 DELETE  &kt RIGHT_SHIFT
            >;
        };

        mouse {
            bindings = <
&none     &none     &none      &none      &none      &kp K_REDO      &kp K_PASTE     &kp K_COPY    &kp K_CUT        &kp K_UNDO
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
&none     &none     &none      &none      &none      &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none
&none     &none     &none      &mkp RCLK  &mkp LCLK  &mkp MCLK
            >;
        };

        num {
            bindings = <
&none     &none     &none      &none      &none  &kp PLUS      &kp N7  &kp N8        &kp N9      &kp MINUS
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none  &kp N0        &kp N4  &kp N5        &kp N6      &none
&none     &none     &none      &none      &none  &kp ASTERISK  &kp N1  &mt COMMA N2  &mt DOT N3  &kp SLASH
&none     &none     &none      &none      &none  &none
            >;
        };

        nav {
            bindings = <
&none     &none     &none      &none      &none  &kp K_REDO      &kp K_PASTE     &kp K_COPY     &kp K_CUT  &kp K_UNDO
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT  &none
&none     &none     &none      &none      &none  &kp HOME        &kp PAGE_UP     &kp PAGE_DOWN  &kp END    &none
&none     &none     &none      &none      &none  &none
            >;
        };

        symbol {
            bindings = <
&kp GRAVE        &kp LESS_THAN  &kp GREATER_THAN  &kp DOUBLE_QUOTES     &kp DOT   &kp AMPERSAND  &kp TILDE              &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT
&kp EXCLAMATION  &kp MINUS      &kp PLUS          &mt LEFT_SHIFT EQUAL  &kp HASH  &kp PIPE       &mt RIGHT_SHIFT COLON  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION
&kp CARET        &kp SLASH      &kp ASTERISK      &kp BACKSLASH         &none     &none          &kp DOLLAR             &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AT_SIGN
&none            &none          &none             &none                 &none     &none
            >;
        };

        func {
            bindings = <
&none     &none     &none      &none      &none  &kp F12  &kp F7  &kp F8  &kp F9  &none
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none  &kp F11  &kp F4  &kp F5  &kp F6  &kp F7
&none     &none     &none      &none      &none  &kp F10  &kp F1  &kp F2  &kp F3  &none
&none     &none     &none      &none      &none  &none
            >;
        };

        media {
            bindings = <
&none  &kp C_PREV         &kp C_NEXT        &none  &none  &none  &none           &none            &none              &none
&none  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &none  &none  &none  &kp C_PREVIOUS  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_NEXT
&none  &kp C_MUTE         &kp C_PLAY_PAUSE  &none  &none  &none  &none           &none            &none              &none
&none  &none              &none             &none  &none  &none
            >;
        };

        utils {
            bindings = <
&bootloader   &none  &none  &none  &sys_reset  &none  &none         &none         &none         &bootloader
&out OUT_USB  &none  &none  &none  &none       &none  &none         &none         &none         &out OUT_BLE
&none         &none  &none  &none  &none       &none  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none
&none         &none  &none  &none  &none       &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
