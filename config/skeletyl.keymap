#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hmp: homerow_mods_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        to_utils {
            bindings = <&tog 7>;
            key-positions = <10 19 29 20>;
            layers = <0 7>;
        };

        clearBluetooth {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <35 34 30 31>;
            layers = <7>;
        };

        change_language {
            bindings = <&kp LG(SPACE)>;
            key-positions = <14 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_win {
            bindings = <
&kp Q            &kp W           &kp E               &kp R             &kp T            &kp Y         &kp U              &kp I                &kp O            &kp P
&hmp LEFT_GUI A  &hm LEFT_ALT S  &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &kp G            &kp H         &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hm RIGHT_ALT L  &hmp RIGHT_GUI SEMICOLON
&lt 6 Z          &kp X           &kp C               &kp V             &kp B            &kp N         &kp M              &kp COMMA            &kp DOT          &lt 6 SLASH
&lt 8 ESCAPE     &lt 3 SPACE     &lt 1 TAB           &lt 5 ENTER       &lt 2 BACKSPACE  &lt 4 DELETE
            >;
        };

        mouse {
            bindings = <
&none     &none     &none      &none      &none      &kp K_REDO  &kp K_PASTE     &kp K_COPY      &kp K_CUT     &kp K_UNDO
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none      &none       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT
&none     &none     &none      &none      &none      &none       &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT
&none     &none     &none      &mkp RCLK  &mkp LCLK  &mkp MCLK
            >;
        };

        num {
            bindings = <
&kp LBKT   &kp N7  &kp N8     &kp N9  &kp RBKT   &none  &none      &none      &none     &none
&kp SEMI   &kp N4  &kp N5     &kp N6  &kp EQUAL  &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp GRAVE  &kp N1  &kp N2     &kp N3  &kp FSLH   &none  &none      &none      &none     &none
&kp DOT    &none   &kp MINUS  &none   &none      &none
            >;
        };

        nav {
            bindings = <
&none     &none     &none      &none      &none     &kp K_REDO    &kp K_PASTE  &kp K_COPY     &kp K_CUT     &kp K_UNDO
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none     &kp CAPSLOCK  &kp LEFT     &kp DOWN       &kp UP_ARROW  &kp RIGHT_ARROW
&none     &none     &none      &none      &none     &kp INS       &kp HOME     &kp PAGE_DOWN  &kp PAGE_UP   &kp END
&none     &none     &none      &kp ENTER  &kp BSPC  &kp DELETE
            >;
        };

        func {
            bindings = <
&kp F12             &kp F7     &kp F8   &kp F9  &kp PRINTSCREEN  &none  &none      &none      &none     &none
&kp F11             &kp F4     &kp F5   &kp F6  &kp SCROLLLOCK   &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp F10             &kp F1     &kp F2   &kp F3  &kp PAUSE_BREAK  &none  &none      &none      &none     &kp F10
&kp K_CONTEXT_MENU  &kp SPACE  &kp TAB  &none   &none            &none
            >;
        };

        symbol {
            bindings = <
&kp LEFT_BRACE        &kp AMPERSAND          &kp ASTERISK  &kp PIPE   &kp RIGHT_BRACE  &none  &none      &none      &none     &none
&kp COLON             &kp DOLLAR             &kp PERCENT   &kp CARET  &none            &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp TILDE             &kp EXCLAMATION        &kp AT_SIGN   &kp HASH   &none            &none  &none      &none      &none     &none
&kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SPACE     &none      &none            &none
            >;
        };

        button_linux {
            bindings = <
&none                          &none        &kp LG(A)                &none      &none          &none  &none      &none      &none     &none
&kp LC(A)                      &kp LC(S)    &none                    &kp LC(F)  &none          &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp LC(Z)                      &kp LC(X)    &kp LC(C)                &kp LC(V)  &kp LC(LS(Z))  &none  &none      &none      &none     &none
&mt LS(LA(TAB)) LG(PAGE_DOWN)  &kp LG(TAB)  &mt LA(TAB) LG(PAGE_UP)  &none      &none          &none
            >;
        };

        utils {
            bindings = <
&bootloader  &none         &none         &none         &sys_reset  &none  &none  &none         &none  &bootloader
&none        &bt BT_SEL 0  &out OUT_BLE  &bt BT_SEL 1  &none       &none  &none  &out OUT_USB  &none  &none
&none        &none         &none         &none         &none       &none  &none  &none         &none  &none
&none        &none         &none         &none         &none       &none
            >;
        };

        media {
            bindings = <
&trans    &trans    &trans     &trans     &trans            &trans      &trans          &trans           &trans             &trans
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans            &trans      &kp C_PREVIOUS  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_NEXT
&trans    &trans    &trans     &trans     &trans            &trans      &trans          &trans           &trans             &trans
&trans    &trans    &trans     &trans     &kp C_PLAY_PAUSE  &kp C_MUTE
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
